OTEP - OpenTafl Engine Protocol

The OpenTafl Engine Protocol is a bidirectional communications protocol used by
OpenTafl to communicate with external tafl engines. For simplicity, it uses
piped text input and output, with human-readable commands. OpenTafl sends all
commands using the US-ASCII character set, and expects to receive responses
in the same. Commands will be separated by the newline character \n.

Anywhere an ordering of commands is specified in this document, that ordering
is guaranteed.

To avoid complicated bookkeeping, commands are unacknowledged.

1. External engine .ini file
OpenTafl requires that external engines provide an .ini file containing basic
configuration information. The file must contain a section with the [engine]
heading, and entries with the names 'directory', 'filename', and 'command'. It
may optionally contain an entry named 'arguments'.

'directory' must contain the path to the directory in which your engine is
installed, relative to <opentafl-dir>/engines.

'filename' must contain the name of your engine's executable file inside the
directory specified in 'directory'. This entry is used to verify that your
engine file exists and can be accessed by OpenTafl.

'command' must contain the command used to run your engine. OpenTafl will
execute it, using the directory specified in 'directory' as the working
directory.

'arguments' need not be present. If it is, its contents will be treated as
command-line arguments to your engine.

See the opentafl.ini file in any distribution of OpenTafl for an example.

2. Simple Algebraic Tafl Notation
Since both OpenTafl and the external engines maintain game state, detailed
notation is unnecessary. Therefore, OpenTafl by default uses a very simple move
notation: the starting space, a dash, and the finishing space: 'a4-a1'. 
OpenTafl can be configured to use full OpenTafl move notation, if desired.

3. Analysis vs. play
If a player is playing against an external AI engine, and has configured that
same AI engine to provide game analysis, by convention, OpenTafl will run two
instances of your engine. One will be solely dedicated to gameplay, and the
other will be solely dedicated to analysis. If your engine receives a 'play'
command, you may assume that it will not be used for analysis. If your engine
receives an 'analysis' command, it will be used for analysis, and will almost
certainly receive multiple 'rules', 'position', and 'side' commands before
being discarded.

4. hello
Direction: Engine <-> OpenTafl
Command: 'hello'

Alerts OpenTafl that the engine is active. Send 'hello' once your engine has
started.

5. simple-moves
Direction: Engine -> OpenTafl
Command: 'simple-moves <on|off>'
Default: on

When set to on, OpenTafl provides the external engine with simple move records.
When set to off, OpenTafl provides full OpenTafl Algebraic Tafl Notation.

6. rules
Direction: OpenTafl <-> Engine
Command: 'rules [rules-string]'

OpenTafl provides the engine with an OpenTafl Notation Rules string, as defined
in the OpenTafl Notation specification. See the OpenTafl Notation spec for
defaults and other required implementation details.

When receiving a 'rules' command, the engine should initialize to the starting
board position. If the engine sends a 'rules' command, OpenTafl will reply with
a 'rules' command; in this case, initialize to the starting board position only
if the game has not yet begun.

7. start
Direction: OpenTafl -> Engine
Command: 'start'

OpenTafl notifies the engine that the game has started.

8. position
Direction: OpenTafl <-> Engine
Command: 'position [position-record]'

OpenTafl provides the engine with an OpenTafl Notation Position string, as
defined in the OpenTafl Notation specification, representing the current game
state. OpenTafl will not send a position command unless the engine sends a
position command first, or unless the engine is in analysis mode.

9. side
Direction: OpenTafl <-> Engine
Command: 'side [attackers|defenders]'

OpenTafl informs the engine which side it is to play for. OpenTafl will send
a side command immediately prior to game start.

10. clock
Direction: OpenTafl <-> Engine
Command: 'clock [attacker-millis][*] [defender-millis][*] [overtime-seconds] [attacker-overtimes] [defender-overtimes]'

OpenTafl provides the engine with the time left for both players in 
milliseconds. If overtime timing is enabled, also provides the length of each
overtime period in seconds, and how many overtime periods the attacker and 
defender have left.

If main time has expired, [attacker-millis] or [defender-millis] will list the
amount of time remaining in the current overtime period, followed by an
asterisk.

OpenTafl will send clock commands at three times:
1. At the start of every turn, immediately following the 'play' command.
2. When main time expires.
3. When an overtime period expires.

11. analyze
Direction: OpenTafl -> Engine
Command: 'analyze <number> <seconds>'

OpenTafl instructs the engine to analyze the current position, returning the
given number of possible moves with evaluations (see 'analysis') and taking up
to the given amount of time. Engines are not required to return exactly
[number] moves, provided they return at least one move.

12. analysis
Direction: Engine -> OpenTafl
Command: 'analysis <number> [<move-list> <evaluation>]...'

The engine should provide [number] move-list and evaluation pairs. A move-list
is a list of moves in simple algebraic tafl notation or OpenTafl algebraic tafl
notation (see OpenTafl Notation specification for details), which leads from
the current game state to the deepest state searched, separated by the pipe
character: '|'. The move-list should include no spaces. The evaluation is the
engine's overall evaluation of the move which starts the move-list.

Engines are not required to return a full move list, and may elect to simply
provide the first move in the list (the move which exits the current game
state).

13. play
Direction: OpenTafl -> Engine
Command: 'play <attackers|defenders>'

OpenTafl instructs the engine to play for the given side from the current
board state. The game clock runs from the moment the OpenTafl sends the 'play'
command to the moment that OpenTafl receives the 'move' command.

14. move
Direction: Engine -> OpenTafl
Command: 'move <move-record>'

The engine submits the given move to OpenTafl. If the move is made
successfully, OpenTafl returns a 'move' command. If the move is not successful,
OpenTafl returns an 'error' command. See 'error' and 'opponent-move' below.

15. move
Direction: OpenTafl -> Engine
Command: 'move <position-record>'

The move the engine last submitted to OpenTafl completed successfully. The
position record provided is the board state following your move.

16. error
Direction: OpenTafl <-> Engine
Command: 'error <error-code> [message]'

OpenTafl will send errors for incorrectly-proposed moves. OpenTafl can
receive two kinds of error messages from the engine. A non-critical error
will be presented to the user, and the game will continue. A critical error
will be presented to the user, and the game will end.

Error code can be one of the following:
Engine -> OpenTafl:
-1: critical error
0: non-critical error

OpenTafl -> Engine:
1: wrong side
2: illegal move (blocked, piece at end, &c.)
3: wrong side (berserk move)
4: illegal move (berserk)

17. opponent-move
Direction: OpenTafl -> Engine
Command: 'opponent-move <move-list> <position-record>'

OpenTafl informs the engine that the other side has made a move, given as
[move-list] in whichever algebraic tafl notation the engine is configured
to use. [position-record] gives the current state of the board.

[move-list] is a string of move records separated by the pipe character '|',
and will only be more than one move in the case of berserk tafl and berserk
moves. Moves are listed from oldest to newest. [position-record] is always
the state of the board at the end of the move list.

OpenTafl will always send an 'opponent-move' command immediately before a
'play' command, even if the 'play' command is a repeat after an 'error'
command. Note that, in case of an erroneous move, OpenTafl will send three
commands: 'error', 'opponent-move' (containing the prior move, and the correct
board position), and 'play'.

18. finish
Direction: OpenTafl -> Engine
Command: 'finish <finish-code>'

OpenTafl informs the engine that the game has ended. Result codes:
0: exit before victory
1: draw
2: attackers win
3: defenders win

19. goodbye
Direction: OpenTafl -> Engine
Command: 'goodbye'

OpenTafl informs the engine that it may safely shut down.

20. status
Direction: Engine -> OpenTafl
Command: 'status [text]'

All text between the end of 'status' and the next newline character will be
output to the OpenTafl status display.
